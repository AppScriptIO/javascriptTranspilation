"use strict";const path = require('path'),
filesystem = require('fs'),
assert = require('assert'),
{ transformFileSync } = require('@babel/core'),
{ addHook: addRequireHook } = require('pirates'),
_babelRegister = require(`@babel/register`),
{ removeMatchingStringFromBeginning } = require('./utility/removeMatchingStringFromBeginning.js'),
defaultOutputRelativePath = './temporary/transpiled',
isPreservedSymlink = require('./utility/isPreservedSymlinkFlag.js');

function babelRegister({ babelConfig }) {


  _babelRegister(babelConfig);

}

function trackFile({ ignoreFilenamePattern, extension, emit }) {
  addRequireHook(
  (code, filename) => {
    emit(code, filename);
    return code;
  },
  {
    exts: extension,
    ignoreNodeModules: false,
    matcher: filename => ignoreFilenamePattern.some(regex => filename.match(regex)) ? false : true });


}

function writeFileToDisk({ targetProjectConfig, outputRelativePath, extension, ignoreNodeModules = false, ignoreFilenamePattern = [] }) {

  outputRelativePath = targetProjectConfig.transpilation && targetProjectConfig.transpilation.outputDirectory || defaultOutputRelativePath;
  addRequireHook(
  (code, filename) => {
    let content;
    content = code;


    let outputPath = path.join(targetProjectConfig.rootPath, outputRelativePath);
    let relativeFilePath = removeMatchingStringFromBeginning({ basePath: targetProjectConfig.rootPath, targetPath: filename });
    let traspiledFilePath = path.join(outputPath, relativeFilePath);

    filesystem.mkdirSync(path.dirname(traspiledFilePath), { recursive: true });


    filesystem.writeFileSync(traspiledFilePath, content, { encoding: 'utf8' });
    return code;
  },
  {
    exts: extension,
    ignoreNodeModules: ignoreNodeModules,
    matcher: filename => ignoreFilenamePattern.some(regex => filename.match(regex)) ? false : true });


}

function babelTransformFile({ babelConfig, extension, ignoreNodeModules = false, ignoreFilenamePattern = [] } = {}) {
  addRequireHook(
  (code, filename) => {
    let content;

    let transformed = transformFileSync(
    filename,
    Object.assign(
    {

      sourceMaps: 'both' || 'inline' || true,
      ast: false },

    babelConfig));



    content = transformed.code;
    return content;
  },
  {
    exts: extension,
    ignoreNodeModules: ignoreNodeModules,
    matcher: filename => ignoreFilenamePattern.some(regex => filename.match(regex)) ? false : true });


}

module.exports = { trackFile, babelTransformFile, writeFileToDisk, babelRegister };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,