"use strict";const path = require('path'),
filesystem = require('fs'),
assert = require('assert'),
babel = require('@babel/core'),
{ addHook: addRequireHook } = require('pirates'),
{ removeMatchingStringFromBeginning } = require('./utility/removeMatchingStringFromBeginning.js'),
defaultOutputRelativePath = './temporary/transpiled',
isPreservedSymlink = require('./utility/isPreservedSymlinkFlag.js');



function babelRegister({ babelRegisterConfig }) {

  const _babelRegister = require(`@babel/register`);


  return _babelRegister(babelRegisterConfig);

}



function babelTransform({ babelConfig, extension, ignoreNodeModules = false, ignoreFilenamePattern = [] } = {}) {
  return addRequireHook(
  (code, filename) => {

    babelConfig = Object.assign({}, babelConfig, { filename, sourceRoot: path.dirname(filename) });
    const options = new babel.OptionManager().init(babelConfig);

    let transformed;

    transformed = babel.transformSync(code, options);

    return transformed.code;
  },
  {
    exts: extension,
    ignoreNodeModules,
    matcher: filename => {
      let matchIgnore = ignoreFilenamePattern.some(regex => filename.match(regex));
      return !matchIgnore;
    } });


}


function trackFile({ ignoreFilenamePattern, extension, emit }) {
  return addRequireHook(
  (code, filename) => {
    emit(code, filename);
    return code;
  },
  {
    exts: extension,
    ignoreNodeModules: false,
    matcher: filename => {
      let matchIgnore = ignoreFilenamePattern.some(regex => filename.match(regex));
      return !matchIgnore;
    } });


}

function writeFileToDisk({ targetProjectConfig, outputRelativePath, extension, ignoreNodeModules = false, ignoreFilenamePattern = [] }) {

  outputRelativePath = targetProjectConfig.transpilation && targetProjectConfig.transpilation.outputDirectory || defaultOutputRelativePath;
  return addRequireHook(
  (code, filename) => {
    let content;
    content = code;


    let outputPath = path.join(targetProjectConfig.rootPath, outputRelativePath);
    let relativeFilePath = removeMatchingStringFromBeginning({ basePath: targetProjectConfig.rootPath, targetPath: filename });
    let traspiledFilePath = path.join(outputPath, relativeFilePath);

    filesystem.mkdirSync(path.dirname(traspiledFilePath), { recursive: true });


    filesystem.writeFileSync(traspiledFilePath, content, { encoding: 'utf8' });
    return code;
  },
  {
    exts: extension,
    ignoreNodeModules: ignoreNodeModules,
    matcher: filename => {
      let matchIgnore = ignoreFilenamePattern.some(regex => filename.match(regex));
      return !matchIgnore;
    } });


}

module.exports = { trackFile, babelTransform, writeFileToDisk, babelRegister };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,