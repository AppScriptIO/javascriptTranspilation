"use strict";const { transformFileSync } = require('@babel/core'),
{ addHook: addRequireHook } = require('pirates'),
path = require('path'),
filesystem = require('fs'),
assert = require('assert'),
{ removeMatchingStringFromBeginning } = require('./utility/removeMatchingStringFromBeginning.js'),
defaultOutputRelativePath = './temporary/transpiled',
isPreservedSymlink = require('./utility/isPreservedSymlinkFlag.js');

function filesystemTranspiledOutput({
  babelConfig,
  shouldTransform = false,
  targetProjectConfig,
  outputRelativePath = defaultOutputRelativePath,
  extension,
  ignoreNodeModules = false,
  ignoreFilenamePattern = [] })
{

  outputRelativePath = targetProjectConfig.transpilation && targetProjectConfig.transpilation.outputDirectory || outputRelativePath;
  addRequireHook(
  (code, filename) => {
    let content;

    if (shouldTransform) {
    } else {
      content = code;
    }


    let outputPath = path.join(targetProjectConfig.rootPath, outputRelativePath);
    let relativeFilePath = removeMatchingStringFromBeginning({ basePath: targetProjectConfig.rootPath, targetPath: filename });
    let traspiledFilePath = path.join(outputPath, relativeFilePath);

    filesystem.mkdirSync(path.dirname(traspiledFilePath), { recursive: true });

    filesystem.writeFileSync(traspiledFilePath, content, { encoding: 'utf8' });
    return code;
  },
  {
    exts: extension,
    ignoreNodeModules: ignoreNodeModules,
    matcher: filename => ignoreFilenamePattern.some(regex => filename.match(regex)) ? false : true });


}

function transformHook({ extension, ignoreNodeModules = false, ignoreFilenamePattern = [] } = {}) {
  addRequireHook(
  (code, filename) => {
    let content;

    let transformed = transformFileSync(
    filename,
    Object.assign(
    {

      sourceMaps: 'both' || 'inline' || true,
      ast: false },

    babelConfig));



    content = transformed.code;
    return content;
  },
  {
    exts: extension,
    ignoreNodeModules: ignoreNodeModules,
    matcher: filename => ignoreFilenamePattern.some(regex => filename.match(regex)) ? false : true });


}

module.exports = { transformHook, filesystemTranspiledOutput };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9hZGRpdGlvbmFsUmVxdWlyZUhvb2suanMiXSwibmFtZXMiOlsidHJhbnNmb3JtRmlsZVN5bmMiLCJyZXF1aXJlIiwiYWRkSG9vayIsImFkZFJlcXVpcmVIb29rIiwicGF0aCIsImZpbGVzeXN0ZW0iLCJhc3NlcnQiLCJyZW1vdmVNYXRjaGluZ1N0cmluZ0Zyb21CZWdpbm5pbmciLCJkZWZhdWx0T3V0cHV0UmVsYXRpdmVQYXRoIiwiaXNQcmVzZXJ2ZWRTeW1saW5rIiwiZmlsZXN5c3RlbVRyYW5zcGlsZWRPdXRwdXQiLCJiYWJlbENvbmZpZyIsInNob3VsZFRyYW5zZm9ybSIsInRhcmdldFByb2plY3RDb25maWciLCJvdXRwdXRSZWxhdGl2ZVBhdGgiLCJleHRlbnNpb24iLCJpZ25vcmVOb2RlTW9kdWxlcyIsImlnbm9yZUZpbGVuYW1lUGF0dGVybiIsInRyYW5zcGlsYXRpb24iLCJvdXRwdXREaXJlY3RvcnkiLCJjb2RlIiwiZmlsZW5hbWUiLCJjb250ZW50Iiwib3V0cHV0UGF0aCIsImpvaW4iLCJyb290UGF0aCIsInJlbGF0aXZlRmlsZVBhdGgiLCJiYXNlUGF0aCIsInRhcmdldFBhdGgiLCJ0cmFzcGlsZWRGaWxlUGF0aCIsIm1rZGlyU3luYyIsImRpcm5hbWUiLCJyZWN1cnNpdmUiLCJ3cml0ZUZpbGVTeW5jIiwiZW5jb2RpbmciLCJleHRzIiwibWF0Y2hlciIsInNvbWUiLCJyZWdleCIsIm1hdGNoIiwidHJhbnNmb3JtSG9vayIsInRyYW5zZm9ybWVkIiwiT2JqZWN0IiwiYXNzaWduIiwic291cmNlTWFwcyIsImFzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJhQUFBLE1BQU0sRUFBRUEsaUJBQUYsS0FBd0JDLE9BQU8sQ0FBQyxhQUFELENBQXJDO0FBQ0UsRUFBRUMsT0FBTyxFQUFFQyxjQUFYLEtBQThCRixPQUFPLENBQUMsU0FBRCxDQUR2QztBQUVFRyxJQUFJLEdBQUdILE9BQU8sQ0FBQyxNQUFELENB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WjtBQUNFYSxJQUFBQSxJQUFJLEVBQUVwQixTQURSO0FBRUVDLElBQUFBLGlCQUFpQixFQUFFQSxpQkFGckI7QUFHRW9CLElBQUFBLE9BQU8sRUFBRWYsUUFBUSxJQUFLSixxQkFBcUIsQ0FBQ29CLElBQXRCLENBQTJCQyxLQUFLLElBQUlqQixRQUFRLENBQUNrQixLQUFULENBQWVELEtBQWYsQ0FBcEMsSUFBNkQsS0FBN0QsR0FBcUUsSUFIN0YsRUFuQlksQ0FBZDs7O0FBeUJEOztBQUVEUSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsRUFBRVAsYUFBRixFQUFpQjlCLDBCQUFqQixFQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgdHJhbnNmb3JtRmlsZVN5bmMgfSA9IHJlcXVpcmUoJ0BiYWJlbC9jb3JlJyksXG4gIHsgYWRkSG9vazogYWRkUmVxdWlyZUhvb2sgfSA9IHJlcXVpcmUoJ3BpcmF0ZXMnKSxcbiAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKSxcbiAgZmlsZXN5c3RlbSA9IHJlcXVpcmUoJ2ZzJyksXG4gIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpLFxuICB7IHJlbW92ZU1hdGNoaW5nU3RyaW5nRnJvbUJlZ2lubmluZyB9ID0gcmVxdWlyZSgnLi91dGlsaXR5L3JlbW92ZU1hdGNoaW5nU3RyaW5nRnJvbUJlZ2lubmluZy5qcycpLFxuICBkZWZhdWx0T3V0cHV0UmVsYXRpdmVQYXRoID0gJy4vdGVtcG9yYXJ5L3RyYW5zcGlsZWQnLFxuICBpc1ByZXNlcnZlZFN5bWxpbmsgPSByZXF1aXJlKCcuL3V0aWxpdHkvaXNQcmVzZXJ2ZWRTeW1saW5rRmxhZy5qcycpXG5cbmZ1bmN0aW9uIGZpbGVzeXN0ZW1UcmFuc3BpbGVkT3V0cHV0KHtcbiAgYmFiZWxDb25maWcsXG4gIHNob3VsZFRyYW5zZm9ybSA9IGZhbHNlLFxuICB0YXJnZXRQcm9qZWN0Q29uZmlnLFxuICBvdXRwdXRSZWxhdGl2ZVBhdGggPSBkZWZhdWx0T3V0cHV0UmVsYXRpdmVQYXRoLFxuICBleHRlbnNpb24sXG4gIGlnbm9yZU5vZGVNb2R1bGVzID0gZmFsc2UsXG4gIGlnbm9yZUZpbGVuYW1lUGF0dGVybiA9IFtdIC8qIEFycmF5IG9mIFJlZ2V4IHR5cGUgKi8sXG59KSB7XG4gIC8vIGlmICghaXNQcmVzZXJ2ZWRTeW1saW5rRmxhZygpKSBjb25zb2xlLndhcm4oJ+KAoiBOb3QgdXNpbmcgbm9kZSBydW50aW1lIHByZXNlcnZlIHN5bWxpbmsgZmxhZyBtYXkgd2lsbCBtYXkgb3V0cHV0IHN5bWxpbmsgZm9sZGVycyB0byBkaXN0cmlidXRpb24gZm9sZGVyIHdpdGggcGF0aCByZWxhdGl2ZSB0byB0YXJnZXQgcHJvamVjdCAnKVxuICBvdXRwdXRSZWxhdGl2ZVBhdGggPSAodGFyZ2V0UHJvamVjdENvbmZpZy50cmFuc3BpbGF0aW9uICYmIHRhcmdldFByb2plY3RDb25maWcudHJhbnNwaWxhdGlvbi5vdXRwdXREaXJlY3RvcnkpIHx8IG91dHB1dFJlbGF0aXZlUGF0aFxuICBhZGRSZXF1aXJlSG9vayhcbiAgICAoY29kZSwgZmlsZW5hbWUpID0+IHtcbiAgICAgIGxldCBjb250ZW50XG5cbiAgICAgIGlmIChzaG91bGRUcmFuc2Zvcm0pIHtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQgPSBjb2RlXG4gICAgICB9XG5cbiAgICAgIC8vIHdydGllIHRvIGZpbGVzeXN0ZW1cbiAgICAgIGxldCBvdXRwdXRQYXRoID0gcGF0aC5qb2luKHRhcmdldFByb2plY3RDb25maWcucm9vdFBhdGgsIG91dHB1dFJlbGF0aXZlUGF0aClcbiAgICAgIGxldCByZWxhdGl2ZUZpbGVQYXRoID0gcmVtb3ZlTWF0Y2hpbmdTdHJpbmdGcm9tQmVnaW5uaW5nKHsgYmFzZVBhdGg6IHRhcmdldFByb2plY3RDb25maWcucm9vdFBhdGgsIHRhcmdldFBhdGg6IGZpbGVuYW1lIH0pXG4gICAgICBsZXQgdHJhc3BpbGVkRmlsZVBhdGggPSBwYXRoLmpvaW4ob3V0cHV0UGF0aCwgcmVsYXRpdmVGaWxlUGF0aClcbiAgICAgIC8vIGNyZWF0ZSBkaXJlY3RvcnlcbiAgICAgIGZpbGVzeXN0ZW0ubWtkaXJTeW5jKHBhdGguZGlybmFtZSh0cmFzcGlsZWRGaWxlUGF0aCksIHsgcmVjdXJzaXZlOiB0cnVlIH0pXG4gICAgICAvLyB3cml0ZSBmaWxlXG4gICAgICBmaWxlc3lzdGVtLndyaXRlRmlsZVN5bmModHJhc3BpbGVkRmlsZVBhdGgsIGNvbnRlbnQsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KVxuICAgICAgcmV0dXJuIGNvZGVcbiAgICB9LFxuICAgIHtcbiAgICAgIGV4dHM6IGV4dGVuc2lvbixcbiAgICAgIGlnbm9yZU5vZGVNb2R1bGVzOiBpZ25vcmVOb2RlTW9kdWxlcyxcbiAgICAgIG1hdGNoZXI6IGZpbGVuYW1lID0+IChpZ25vcmVGaWxlbmFtZVBhdHRlcm4uc29tZShyZWdleCA9PiBmaWxlbmFtZS5tYXRjaChyZWdleCkpID8gZmFsc2UgOiB0cnVlKSxcbiAgICB9LFxuICApXG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUhvb2soeyBleHRlbnNpb24sIGlnbm9yZU5vZGVNb2R1bGVzID0gZmFsc2UsIGlnbm9yZUZpbGVuYW1lUGF0dGVybiA9IFtdIC8qIEFycmF5IG9mIFJlZ2V4IHR5cGUgKi8gfSA9IHt9KSB7XG4gIGFkZFJlcXVpcmVIb29rKFxuICAgIChjb2RlLCBmaWxlbmFtZSkgPT4ge1xuICAgICAgbGV0IGNvbnRlbnRcblxuICAgICAgbGV0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtRmlsZVN5bmMoXG4gICAgICAgIGZpbGVuYW1lLFxuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL29wdGlvbnNcbiAgICAgICAgICAgIHNvdXJjZU1hcHM6ICdib3RoJyAvKmlubGluZSAmIGluY2x1ZGUgaW4gcmVzdWx0IG9iamVjdCovIHx8ICdpbmxpbmUnIHx8IHRydWUsXG4gICAgICAgICAgICBhc3Q6IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmFiZWxDb25maWcsXG4gICAgICAgICksXG4gICAgICApXG4gICAgICAvLyB0cmFuc2Zvcm1lZC5jb2RlIHRyYW5zZm9ybWVkLm1hcFxuICAgICAgY29udGVudCA9IHRyYW5zZm9ybWVkLmNvZGVcbiAgICAgIHJldHVybiBjb250ZW50XG4gICAgfSxcbiAgICB7XG4gICAgICBleHRzOiBleHRlbnNpb24sXG4gICAgICBpZ25vcmVOb2RlTW9kdWxlczogaWdub3JlTm9kZU1vZHVsZXMsXG4gICAgICBtYXRjaGVyOiBmaWxlbmFtZSA9PiAoaWdub3JlRmlsZW5hbWVQYXR0ZXJuLnNvbWUocmVnZXggPT4gZmlsZW5hbWUubWF0Y2gocmVnZXgpKSA/IGZhbHNlIDogdHJ1ZSksXG4gICAgfSxcbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgdHJhbnNmb3JtSG9vaywgZmlsZXN5c3RlbVRyYW5zcGlsZWRPdXRwdXQgfVxuIl19