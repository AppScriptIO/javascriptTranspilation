"use strict";const _path = require('path');
const resolveModule = require('resolve');
const babel = require('@babel/core');
const CONCAT_NO_PACKAGE_ERROR = 'Dynamic import with a concatenated string should start with a valid full package name.';

{

  function resolveUsingExternalPackage() {



























  }
}




















module.exports.transformNamedModuleToPath = function () {
  return {
    visitor: {
      'ImportDeclaration|ExportNamedDeclaration'(path, state) {
        if (!path.node.source) return;
        let importer = state.file.opts.filename,
        source = path.node.source,
        importee = source.value;


        if (source.value.startsWith('/') || source.value.startsWith('.')) return;

        let pathToResolve = importee;
        let pathToAppend = '';

        const parts = importee.split('/');
        if (importee.startsWith('@')) {
          if (parts.length < 2) throw new Error(CONCAT_NO_PACKAGE_ERROR);

          pathToResolve = `${parts[0]}/${parts[1]}`;
          pathToAppend = parts.slice(2, parts.length).join('/');
        } else {
          if (parts.length < 1) throw new Error(CONCAT_NO_PACKAGE_ERROR);
          [pathToResolve] = parts;
          pathToAppend = parts.slice(1, parts.length).join('/');
        }

        const lookupDirectory = _path.dirname(importer),
        moduleDirectory = ['node_modules', '@package'];


        let resolvedPath;
        if (pathToAppend) {
          pathToResolve = `${pathToResolve}/package.json`;
          let resolvedPackage = resolveModule.sync(pathToResolve, { basedir: lookupDirectory, moduleDirectory });
          const packageDir = resolvedPackage.substring(0, resolvedPackage.length - 'package.json'.length);
          resolvedPath = `${packageDir}${pathToAppend}`;
        } else {
          console.log(pathToResolve, lookupDirectory, moduleDirectory);
          resolvedPath = resolveModule.sync(pathToResolve, { basedir: lookupDirectory, moduleDirectory });
        }


        let relativePathFromImporter = `./${_path.relative(_path.dirname(importer), resolvedPath)}`;






        source.value = relativePathFromImporter;
      } } };


};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,