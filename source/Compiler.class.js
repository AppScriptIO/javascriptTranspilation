"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}const path = require('path'),
filesystem = require('fs'),
assert = require('assert'),
EventEmitter = require('events'),
requireHook = require('./requireHook.js'),
{ defaultRequireHookConfig } = require('./getConfig.js'),
deepCloneJSNativeType = require('clone-deep'),
{ mergeNonexistentProperties } = require('@dependency/handleJSNativeDataStructure');




class Compiler extends EventEmitter {
  constructor({ babelConfig = {}, callerPath } = {}) {
    super();
    Compiler.instance.push(this);

    this.config = babelConfig;
    this.callerPath = callerPath;









    this.loadedFiles = this.loadedFiles || [];

    this.initializeTransformConfiguration();
  }


  initializeTransformConfiguration() {


    this.config = deepCloneJSNativeType(this.config);
    assert(defaultRequireHookConfig.ignore, `• Must contain at least ignore property, as it is used in the Compiler instance and modified when needed.`);

    mergeNonexistentProperties(this.config, deepCloneJSNativeType(defaultRequireHookConfig));

    if (!this.config.plugins && !this.config.presets) {
      this.setTargetProject();
      assert(
      this.targetProjectConfig.configuration.transpilation && this.targetProjectConfig.configuration.transpilation.babelConfig,
      `• Project configuration must have 'transpilation' & nested 'babelConfig' entries.`);

      Object.assign(this.config, this.targetProjectConfig.configuration.transpilation.babelConfig);
    }
  }

  requireHook({ restrictToTargetProject = true } = {}) {
    if (restrictToTargetProject) {
      this.setTargetProject();

      const targetProjectFilesRegex = new RegExp(`^((?!${this.targetProjectConfig.rootPath}).)*$`);
      this.config.ignore.push(targetProjectFilesRegex);
    }


    this.on('fileLoaded', fileObject => this.loadedFiles.push(_objectSpread({}, fileObject)));


    let revertHook = requireHook.babelRegister({ babelConfig: this.config });


    requireHook.trackFile({
      emit: (code, filename) => this.emit('fileLoaded', { filename, code }),
      ignoreFilenamePattern: this.config.ignore,
      extension: this.config.extensions });



    this.setPrimaryTargetProject();
    requireHook.writeFileToDisk({
      extension: this.config.extensions,
      ignoreFilenamePattern: this.config.ignore,
      shouldTransform: false,
      targetProjectConfig: this.primaryTargetProjectConfig });


    return { revertHook };
  }


  setTargetProject() {
    if (this.targetProjectConfig) return;
    assert(this.callerPath, '• callerPath should be passed in case babel configuration was not provided');
    const { findTargetProjectRoot } = require('@deployment/configurationManagement');
    this.targetProjectConfig = findTargetProjectRoot({ nestedProjectPath: [this.callerPath] });
  }


  setPrimaryTargetProject({ nestedProjectPath = [process.cwd(), module.parent.filename] } = {}) {
    if (this.primaryTargetProjectConfig) return;
    const { findTargetProjectRoot } = require('@deployment/configurationManagement');
    this.primaryTargetProjectConfig = findTargetProjectRoot({ nestedProjectPath });
  }}



Compiler.instance = [];













Compiler.transpilationModulePath = path.join(__dirname, '..');

module.exports = {
  Compiler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,