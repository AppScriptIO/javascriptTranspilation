"use strict";const path = require('path'),
filesystem = require('fs'),
assert = require('assert'),
EventEmitter = require('events'),
requireHook = require('./requireHook.js'),
{ defaultRequireHookConfig } = require('./getConfig.js'),
deepCloneJSNativeType = require('clone-deep'),
{ mergeNonexistentProperties } = require('@dependency/handleJSNativeDataStructure');




class Compiler extends EventEmitter {
  constructor({
    callerPath,

    babelConfig = {},





    extensions = ['.js', '.mjs', '.ts'] } =
  {}) {
    super();
    Compiler.instance.push(this);

    this.config = babelConfig;
    this.extensions = extensions;
    this.callerPath = callerPath;









    this.loadedFiles = this.loadedFiles || [];

    this.initializeTransformConfiguration();
  }


  initializeTransformConfiguration() {


    this.config = deepCloneJSNativeType(this.config);
    assert(defaultRequireHookConfig.ignore, `• Must contain at least ignore property, as it is used in the Compiler instance and modified when needed.`);

    mergeNonexistentProperties(this.config, deepCloneJSNativeType(defaultRequireHookConfig));

    if (!this.config.plugins && !this.config.presets) {
      this.setTargetProject();
      assert(
      this.targetProjectConfig.configuration.transpilation && this.targetProjectConfig.configuration.transpilation.babelConfig,
      `• Project configuration must have 'transpilation' & nested 'babelConfig' entries.`);

      Object.assign(this.config, this.targetProjectConfig.configuration.transpilation.babelConfig);
    }


    Object.assign(this.config, { caller: { name: '@deployment/javascriptTranspilation' } });
  }

  requireHook({ restrictToTargetProject = true } = {}) {
    let revertHookList = [];

    if (restrictToTargetProject) {
      this.setTargetProject();

      const targetProjectFilesRegex = new RegExp(`^((?!${this.targetProjectConfig.rootPath}).)*$`);
      this.config.ignore.push(targetProjectFilesRegex);
    }


    this.on('fileLoaded', fileObject => this.loadedFiles.push(fileObject));



    {
      let revertHook = requireHook.trackFile({
        emit: (code, filename) => this.emit('fileLoaded', { filename, code }),
        ignoreFilenamePattern: this.config.ignore,
        extension: this.extensions });

      revertHookList.push(revertHook);
    }


    {
      console.log(`[javascriptTranspilation] Registered Nodejs require hook for runtime transpilation - ${this.callerPath || 'Unknown compiler.callerPath'}`);

      let revertHook;

      revertHook = requireHook.babelTransform({ babelConfig: this.config, extension: this.extensions, ignoreNodeModules: false, ignoreFilenamePattern: this.config.ignore });
      revertHookList.push(revertHook);
    }


    {
      this.setPrimaryTargetProject();
      let revertHook = requireHook.writeFileToDisk({
        extension: this.extensions,
        ignoreFilenamePattern: this.config.ignore,
        targetProjectConfig: this.primaryTargetProjectConfig });

      revertHookList.push(revertHook);
    }

    return { revertHook: () => revertHookList.forEach(revert => revert()) };
  }


  setTargetProject() {
    if (this.targetProjectConfig) return;
    assert(this.callerPath, '• callerPath should be passed in case babel configuration was not provided');
    const { findTargetProjectRoot } = require('@deployment/configurationManagement');
    this.targetProjectConfig = findTargetProjectRoot({ nestedProjectPath: [this.callerPath] });
  }


  setPrimaryTargetProject({ nestedProjectPath = [process.cwd(), module.parent.filename] } = {}) {
    if (this.primaryTargetProjectConfig) return;
    const { findTargetProjectRoot } = require('@deployment/configurationManagement');
    this.primaryTargetProjectConfig = findTargetProjectRoot({ nestedProjectPath });
  }}



Compiler.instance = [];













Compiler.transpilationModulePath = path.join(__dirname, '..');

module.exports = {
  Compiler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,