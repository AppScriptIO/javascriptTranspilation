"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));


const path = require('path'),
filesystem = require('fs'),
assert = require('assert'),
moduleSystem = require('module'),
EventEmitter = require('events'),
babelRegister = require(`@babel/register`),
{ addHook: addRequireHook } = require('pirates');



function getCompilerConfig(configKey) {
  return require(`./compilerConfiguration/${configKey}`);
}


function getBabelConfig(babelConfigFilename, { configType = 'json' } = {}) {
  const jsonConfig = require(`./compilerConfiguration/${babelConfigFilename}`);
  switch (configType) {
    case 'functionApi':
      return api => {
        api.cache.forever();
        return jsonConfig.babelConfig;
      };
      break;
    case 'json':
    default:
      return jsonConfig.babelConfig;
      break;}

  return;
}


module.exports.getBabelConfig = getBabelConfig;
module.exports.getCompilerConfig = getCompilerConfig;
const { addModuleResolutionPathMultiple } = require(`@dependency/addModuleResolutionPath`),
{ filesystemTranspiledOutput } = require('./additionalRequireHook.js'),
{ requireHook: defaultRequireHookConfig } = require('./compilerConfiguration/requireHookConfig.js'),
{ isPreservedSymlinkFlag } = require('./utility/isPreservedSymlinkFlag.js');




class Compiler {
  constructor({ babelTransformConfig, babelRegisterConfig } = {}) {
    if (!babelRegisterConfig) babelRegisterConfig = defaultRequireHookConfig;
    if (!babelTransformConfig) {
      this.setTargetProject();
      babelTransformConfig = this.targetProjectConfig.configuration.transpilation.babelConfig;
    }
    this.babelTransformConfig = babelTransformConfig;
    this.babelRegisterConfig = babelRegisterConfig;
  }
  requireHook() {
    function requireHook({ babelTransformConfig, babelRegisterConfig }) {


      babelRegister(Object.assign({}, babelTransformConfig, babelRegisterConfig));

    }
    let revertHook = requireHook({ babelTransformConfig: this.babelTransformConfig, babelRegisterConfig: this.babelRegisterConfig });
    this.trackLoadedFile();
    return {
      revertHook: revertHook };

  }
  trackLoadedFile() {
    debugger;
    this.loadedFiles = this.loadedFiles || [];
    let ignoreFilenamePattern = [];
    let eventEmitter = new EventEmitter();
    addRequireHook(
    (code, filename) => {
      eventEmitter.emit('fileLoaded', { filename, code });
      return code;
    },
    {
      exts: this.babelRegisterConfig.extensions,
      ignoreNodeModules: true,
      matcher: filename => ignoreFilenamePattern.some(regex => filename.match(regex)) ? false : true });


    eventEmitter.on('fileLoaded', fileObject => this.loadedFiles.push((0, _objectSpread2.default)({}, fileObject)));
    return eventEmitter;
  }
  outputTranspilation() {
    this.setTargetProject();

    return filesystemTranspiledOutput({
      babelConfig: this.babelTransformConfig,
      extension: this.babelRegisterConfig.extensions,
      ignoreFilenamePattern: this.babelRegisterConfig.ignore,
      shouldTransform: false,
      targetProjectConfig: this.targetProjectConfig });

  }
  setTargetProject() {
    const { findTargetProjectRoot } = require('@dependency/configurationManagement');
    if (!this.targetProjectConfig) this.targetProjectConfig = findTargetProjectRoot({ nestedProjectPath: [process.cwd(), module.parent.filename] });
  }}



;(function () {
  const babelModulesPath = path.dirname(path.dirname(path.dirname(require.resolve('@babel/core/package.json'))));
  addModuleResolutionPathMultiple({ pathArray: [babelModulesPath] });
})();




Object.assign(module.exports, { Compiler });
if (isPreservedSymlinkFlag())
throw new Error(
'â€¢ Using `preserve symlink` node runtime flag will cause infinite circular dependency, where each will load the module with different accumulative path when symlinking node_modules to each other.');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,