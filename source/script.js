"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}


const path = require('path'),
filesystem = require('fs'),
assert = require('assert'),
moduleSystem = require('module'),
EventEmitter = require('events'),
babelRegister = require(`@babel/register`),
{ addHook: addRequireHook } = require('pirates'),
{ transpileSourcePath } = require('./transpileSourcePath.js');



const targetProjectCallerPath = module.parent.parent.filename;


function getCompilerConfig(configKey) {
  return require(`./compilerConfiguration/${configKey}`);
}


function getBabelConfig(babelConfigFilename, { configType = 'json' } = {}) {
  const jsonConfig = require(`./compilerConfiguration/${babelConfigFilename}`);
  switch (configType) {
    case 'functionApi':
      return api => {
        api.cache.forever();
        return jsonConfig.babelConfig;
      };
      break;
    case 'json':
    default:
      return jsonConfig.babelConfig;
      break;}

  return;
}


module.exports.getBabelConfig = getBabelConfig;
module.exports.getCompilerConfig = getCompilerConfig;
const { addModuleResolutionPathMultiple } = require(`@dependency/addModuleResolutionPath`),
{ filesystemTranspiledOutput } = require('./additionalRequireHook.js'),
defaultRequireHookConfig = require('./compilerConfiguration/requireHookConfig.js'),
{ isPreservedSymlinkFlag } = require('./utility/isPreservedSymlinkFlag.js');




class Compiler {
  constructor({ babelTransformConfig, babelRegisterConfig, callerPath, debugKey } = {}) {
    if (!babelRegisterConfig) babelRegisterConfig = defaultRequireHookConfig();
    if (!babelTransformConfig) {
      assert(callerPath, '• callerPath should be passed in case babel configuration was not provided');
      this.setTargetProject({ nestedProjectPath: [callerPath] });
      babelTransformConfig = this.targetProjectConfig.configuration.transpilation.babelConfig;
    }
    if (!debugKey) debugKey = callerPath;
    this.debugKey = debugKey;
    this.callerPath = callerPath;
    this.babelTransformConfig = babelTransformConfig;
    this.babelRegisterConfig = babelRegisterConfig;
  }
  requireHook({
    restrictToTargetProject = true,
    matchTargetFile = true } =
  {}) {
    if (!matchTargetFile) this.babelRegisterConfig.ignore = [];
    function requireHook({ babelTransformConfig, babelRegisterConfig }) {


      babelRegister(Object.assign({}, babelTransformConfig, babelRegisterConfig));

    }
    if (restrictToTargetProject) {
      assert(this.callerPath, '• callerPath should be passed in order to lookup for project configuration.');
      this.setTargetProject({ nestedProjectPath: [this.callerPath] });
      const targetProjectFilesRegex = new RegExp(`^((?!${this.targetProjectConfig.rootPath}).)*$`);
      this.babelRegisterConfig.ignore.push(targetProjectFilesRegex);
    }
    let revertHook = requireHook({ babelTransformConfig: this.babelTransformConfig, babelRegisterConfig: this.babelRegisterConfig });


    Compiler.trackRegisteredHook();
    this.trackLoadedFile();
    this.outputTranspilation();

    return { revertHook: revertHook };
  }








  trackLoadedFile() {
    this.loadedFiles = this.loadedFiles || [];
    let ignoreFilenamePattern = this.babelRegisterConfig.ignore;
    let eventEmitter = new EventEmitter();
    addRequireHook(
    (code, filename) => {
      eventEmitter.emit('fileLoaded', { filename, code });
      return code;
    },
    {
      exts: this.babelRegisterConfig.extensions,
      ignoreNodeModules: false,
      matcher: filename => ignoreFilenamePattern.some(regex => filename.match(regex)) ? false : true });


    eventEmitter.on('fileLoaded', fileObject => this.loadedFiles.push(_objectSpread({}, fileObject)));
    return eventEmitter;
  }
  outputTranspilation() {
    this.setPrimaryTargetProject();

    return filesystemTranspiledOutput({
      babelConfig: this.babelTransformConfig,
      extension: this.babelRegisterConfig.extensions,
      ignoreFilenamePattern: this.babelRegisterConfig.ignore,
      shouldTransform: false,
      targetProjectConfig: this.primaryTargetProjectConfig });

  }
  setTargetProject({ nestedProjectPath = [] }) {
    if (this.targetProjectConfig) return;
    const { findTargetProjectRoot } = require('@dependency/configurationManagement');
    this.targetProjectConfig = findTargetProjectRoot({ nestedProjectPath });
  }

  setPrimaryTargetProject({ nestedProjectPath = [process.cwd(), module.parent.filename] } = {}) {
    if (this.primaryTargetProjectConfig) return;
    const { findTargetProjectRoot } = require('@dependency/configurationManagement');
    this.primaryTargetProjectConfig = findTargetProjectRoot({ nestedProjectPath });
  }}



Compiler.registeredHook = [];
Compiler.trackRegisteredHook = () => Compiler.registeredHook.push(targetProjectCallerPath);


(function () {
  const babelModulesPath = path.dirname(path.dirname(path.dirname(require.resolve('@babel/core/package.json'))));
  addModuleResolutionPathMultiple({ pathArray: [babelModulesPath] });
})();





Object.assign(module.exports, { Compiler });
if (isPreservedSymlinkFlag())
throw new Error(
'• Using `preserve symlink` node runtime flag will cause infinite circular dependency, where each will load the module with different accumulative path when symlinking node_modules to each other.');




Object.assign(module.exports, { transpileSourcePath });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,